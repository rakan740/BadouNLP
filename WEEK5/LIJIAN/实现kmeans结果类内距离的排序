import math
import re
import json
import jieba
import numpy as np
from gensim.models import Word2Vec
from sklearn.cluster import KMeans
from collections import defaultdict


def load_word2vec_model(path):
    model = Word2Vec.load(path)
    return model


def load_sentence(path):
    sentences = []
    with open(path, encoding="utf8") as f:
        for line in f:
            sentence = line.strip()
            sentences.append(" ".join(jieba.cut(sentence)))
    print("获取句子数量：", len(sentences))
    return sentences


def sentences_to_vectors(sentences, model):
    vectors = []
    for sentence in sentences:
        words = sentence.split()
        vector = np.zeros(model.vector_size)
        for word in words:
            try:
                vector += model.wv[word]
            except KeyError:
                vector += np.zeros(model.vector_size)
        vectors.append(vector / len(words))
    return np.array(vectors)


def main():
    model = load_word2vec_model(r"model.w2v")
    sentences = load_sentence("titles.txt")
    vectors = sentences_to_vectors(sentences, model)

    n_clusters = int(math.sqrt(len(sentences)))
    print("指定聚类数量：", n_clusters)
    kmeans = KMeans(n_clusters)
    kmeans.fit(vectors)

    # 计算距离并排序
    distances = kmeans.transform(vectors)
    cluster_distances = [distances[i, label] for i, label in enumerate(kmeans.labels_)]
    data = list(zip(sentences, kmeans.labels_, cluster_distances))
    sentence_label_dict = defaultdict(list)
    for sentence, label, distance in data:
        sentence_label_dict[label].append((sentence, distance))

    for label in sentence_label_dict:
        sentence_label_dict[label].sort(key=lambda x: x[1])  # 按距离升序排列

    # 输出结果
    for label, sentences_distances in sentence_label_dict.items():
        print(f"Cluster {label}:")
        for i in range(min(10, len(sentences_distances))):
            sentence, distance = sentences_distances[i]
            print(f"{sentence.replace(' ', '')}  距离：{distance:.4f}")
        print("---------")


if __name__ == "__ma
